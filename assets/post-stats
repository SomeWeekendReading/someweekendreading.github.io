#! /usr/bin/env Rscript
## Created on Monday, January 10, 2022 at 8:24am EST by WeekendEditor on WeekendEditorMachine.
## Copyright (c) 2022, SomeWeekendReading.blog.  All rights reserved.  As if you care.

##
## How to run the post-stats pipeline from a Unix shell.
##
## This takes 0 or 1 argument:
## - None: just accept all the defaults
## - One: just the year to analyze, a 4-digit integer like 2022
##

loadScript <- function() {                             # Source main script into global env
  myArgs <- commandArgs(FALSE)                         # ALL args, incl Rscript craziness
  myFile <- pmatch("--file=", myArgs)                  # Find the --file arg to Rscript
  stopifnot(!is.na(myFile))                            # It must be present to proceed!
  ## Script is in same dir as this launcher & may source other stuff relative to that, so
  ## find dir of this script, pushd to it, source script into global env, then popd back.
  ## All of that can be done via judicious use of: source(..., chdir = TRUE, ...).
  ## *** Clumsily, the script assumes the current dir is where the script lives, so put in a global
  scriptDir <<- normalizePath(file.path(normalizePath(getwd()),
                                        dirname(substring(myArgs[myFile],
                                                          first = 1 + nchar("--file=")))))
  source(file.path(scriptDir, "post-stats.r"),         # Full pathname (poss rel to curr dir)
         chdir = TRUE,                                 # Temp dir change to script file's home
         local = FALSE)                                # Load into the GLOBAL environment
  invisible(NA)                                        # Return nothing of interest
}                                                      #

## NB: scriptDir, scriptArgs & loadScript are only vars bound after script loading & when script runs
loadScript()                                           # Source from its dir to global env
scriptArgs <- commandArgs(TRUE)                        # The "real" script arguments
system.time({ setwd(scriptDir);                        # *** Clumsily, script assumes it's in working dir
              switch(as.character(length(scriptArgs)), # Dispatch on number of args (as strings,
                     "0" = postStats(),                #  so can be tagged & have error clause)
                     "1" = postStats(year = as.integer(scriptArgs[[1]])),
                     stop(sprintf("Args should be either nothing or year; got: %s",
                                  paste(scriptArgs, sep = ",")))) },
            gcFirst = TRUE)                            # Clean up memory BEFORE starting
q(status = 0)                                          # Normal exit code, if we get this far
